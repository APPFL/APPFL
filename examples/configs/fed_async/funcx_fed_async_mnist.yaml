algorithm:
  servername: 'ServerFedAsync'
  clientname: 'ClientOptim'
  args:
    # FL algorithm params
    alpha: 0.9
    gamma: 0.1
    rho: 0.01
    max_stalness: 4
    staness_func: 
      name: 'polynomial'
      args:
        a: 0.5
    ## Server update
    server_learning_rate: 0.01
    server_adapt_param: 0.001
    server_momentum_param_1: 0.9
    server_momentum_param_2: 0.99
    ## Clients optimizer
    optim: "SGD"
    num_local_epochs: 10
    optim_args: 
        lr: 0.001
    ## Differential Privacy
    ##  epsilon: False  (non-private)
    ##  epsilon: 1      (stronger privacy as the value decreases)
    ##  epsilon: 0.05
    epsilon: False
    ## Gradient Clipping
    ## clip_value: False (no-clipping)
    ## clip_value: 10    (clipping)
    ## clip_value: 1
    clip_value: False
    clip_norm: 1

training:
  num_epochs: 10

dataset:
  name: MNIST

func:
  get_model:
    module: "appfl.funcx.mnist_example"
    call: "get_model"
  get_data:
    module: "appfl.funcx.mnist_example"
    call: "get_data"
